// Cargar variables de entorno
require('dotenv').config();

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');

const gamesRouter = require('./routes/games');
const reviewsRouter = require('./routes/reviews');

const app = express();
const PORT = process.env.PORT || 4000; 
const MONGODB_URI = process.env.MONGODB_URI;

// Middlewares
app.use(cors()); 
app.use(express.json()); 

// Usar Rutas

// Ruta de prueba inicial
app.get('/', (req, res) => {
  res.send('API de GameTracker funcionando. (Listo para agregar modelos y rutas)');
});
// ... (C√≥digo de configuraci√≥n de Express y Conexi√≥n a DB)

// 7. Usar Rutas
app.use('/api/juegos', gamesRouter); // Todos los endpoints de juegos comenzar√°n con /api/juegos

// gametracker-backend/server.js (en la secci√≥n de 'Usar Rutas')

app.use('/api/resenas', reviewsRouter); // <-- ¬°Esta l√≠nea debe estar activa!

// Ruta de prueba inicial (Endpoint Ra√≠z)


// ... (Resto del c√≥digo del servidor)
// Conexi√≥n a MongoDB Atlas
mongoose.connect(MONGODB_URI)
  .then(() => {
    console.log('‚úÖ Conectado a MongoDB Atlas con √©xito.');

    // Iniciar el servidor solo si la conexi√≥n a la DB es exitosa
    app.listen(PORT, () => {
      console.log(`üöÄ Servidor de GameTracker corriendo en http://localhost:${PORT}`);
    });
  })
  .catch((error) => {
    console.error('‚ùå Error al conectar a MongoDB:', error.message);
    // Usa un log m√°s detallado para debug: console.error('Detalles del error:', error);
    process.exit(1); 
  });

